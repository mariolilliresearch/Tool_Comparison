theory PKI
begin


builtins: symmetric-encryption, asymmetric-encryption

functions: macKey/0 [private],first/1,second/1,fakemacKey/0
equations:first(<x,y,z>)=x, second(<x,y,z>)=y

let P()= 
 new skA;
  event HonestA(pk(skA));
  out(<pk(skA),senc(<pk(skA),'A',skA>,macKey)>);
  	in(<pkB,macpkB>);
	//event ReceivedB(mess_pkB);
	//let <pkB,macpkB>=mess_pkB in
	if 'B'=second(sdec(macpkB,macKey)) then(
		let realpkB=first(sdec(macpkB,macKey)) in
				if(pkB=realpkB) then (
					event AuthenticB(realpkB,pkB)
					)
	)
		

let Q()= 		
	in(<pkA,macpkA>);
	//event ReceivedA(mess_pkA);
	//let <pkA,macpkA>=mess_pkA in
	if 'A'=second(sdec(macpkA,macKey)) then(
		let realpkA=first(sdec(macpkA,macKey)) in
			event AuthenticA(realpkA,pkA);
			if(pkA=realpkA) then (
			     new skB; 
				 event HonestB(pk(skB));
				 out(<pk(skB),senc(<pk(skB),'B',skB>,macKey)>)
				 
				 )
	)
				  
let R()=
	in(<pk,senc(<macpk,macrole,~macsk>,macKey)>);
	let <realpk,role,realsk>=sdec(senc(<macpk,macrole,~macsk>,macKey),macKey) in
			if(pk=realpk) then (
				event Reveal(realpk,realsk);
				out(<pk,realsk>)
				
				)				  
				  
process:
(
(!P)
||
(!Q)
||
(!R)
)

 
 
lemma executable:
exists-trace
 "Ex  skb ska  #t1 #t2 #t3 #t4 . 
  HonestB(pk(skb))@t1
 & HonestA(pk(ska))@t2
 & AuthenticB(pk(skb),pk(skb))@t3
 & AuthenticA(pk(ska),pk(ska))@t4
 "  
 
 lemma secretB:
 "All  skb   #t1 #t2. 
  HonestB(pk(skb))@t1
 & AuthenticB(pk(skb),pk(skb))@t2
 ==>(not (Ex #j. K(skb)@j)) | (Ex sk #j. Reveal(pk(sk),sk)@j & HonestB(pk(sk))@t1)
 
 " 

 lemma secretA:
 "All  ska   #t1 #t2. 
  HonestA(pk(ska))@t1
 & AuthenticA(pk(ska),pk(ska))@t2
 ==>(not (Ex #j. K(ska)@j)) | (Ex sk #j. Reveal(pk(sk),sk)@j & HonestA(pk(sk))@t1)
 
 " 
end
